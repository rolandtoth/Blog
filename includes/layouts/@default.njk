<!doctype html>
<html lang="en" class="no-js">
    <head>
        {%- set description = (seo_description or excerpt or cfg.slogan or title) %}
        <meta http-equiv="content-type" content="text/html;charset=UTF-8">
        <title>
            {%- block metaTitle -%}
                {{ title | pageTitle}}
            {%- endblock -%}
        </title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="{{ description }}">
        <meta name="theme-color" content="{{ cfg.themeColor }}">
        <meta name="msapplication-tap-highlight" content="no">
        <meta property="og:type" content="website">
        <meta property="og:title" content="{{ title }}">
        <meta property="og:description" content="{{ description }}">
        <meta property="og:url" content="{{ page.url | httpUrl }}" id="meta-og-url">
        <meta property="fb:app_id" content="966242223397117">
        {% if img -%}
            {%- set imgPath = "/input/" +  page.fileSlug + "/" + img %}
            {%- set dimensions = imgPath | imageDimensions("object") %}
            <meta property="og:image" content="{{ imgPath | replace("/input/", "/") | httpUrl }}">
            <meta property="og:image:width" content="{{ dimensions.width }}">
            <meta property="og:image:height" content="{{ dimensions.height }}">
        {%- endif %}
        <script>document.querySelector('html').classList.remove('no-js');</script>
        <link rel="stylesheet" href="{{ cfg.style | cacheVersion }}">
        <link rel="shortcut icon" href="{{ cfg.favicon | cacheVersion }}">
        <link rel="canonical" href="{{ page.url | httpUrl }}">
    </head>
    <body class="page-{% if page.fileSlug !== '' %}{{ page.fileSlug }}{% else %}home{% endif %}{%if type %} type-{{ type }}{% endif %}">
        <div class="main-content">
            <main>
                <div class="mid left-offset">
                    {% include "filterbox.njk" %}
                    <div class="top-wrap">
                        {% block title %}
                            {%- block breadcrumb %}
                                {% if breadcrumb %}
                                <ul class="breadcrumb">
                                    {% for b in breadcrumb %}
                                        <li><a href="{{ b.url | url }}">{{ b.text }}</a></li>
                                    {% endfor %}
                                </ul>
                                {% endif %}
                            {% endblock -%}
                            {% block mainTitle %}
                                {% if title %}
                                    <h1>{{ title }}</h1>
                                {% endif %}
                            {% endblock %}
                            {% if title %}
                                {% block subtitle %}{% endblock %}
                            {% endif %}
                        {% endblock %}
                    </div>
                    {% block main %}{% endblock %}
                </div>
            </main>
            <aside>
                {% include "aside.njk" %}
            </aside>
        </div>
        {% for script in cfg.scripts %}
            <script src="{{ script | url | cacheVersion }}" defer></script>
        {% endfor %}
        <script id="dsq-count-scr" src="//{{ cfg.disqusShortName }}.disqus.com/count.js" async></script>
        <script>
const udomdiff=function(e){"use strict";return e.default=function(e,r,i,f,l){for(var n=i.length,t=r.length,s=n,o=0,a=0,v=null;o<t||a<s;)if(t===o)for(var u=s<n?a?f(i[a-1],-0).nextSibling:f(i[s-a],0):l;a<s;)e.insertBefore(f(i[a++],1),u);else if(s===a)for(;o<t;)v&&v.has(r[o])||e.removeChild(f(r[o],-1)),o++;else if(r[o]===i[a])o++,a++;else if(r[t-1]===i[s-1])t--,s--;else if(r[o]===i[s-1]&&i[a]===r[t-1]){var g=f(r[--t],-1).nextSibling;e.insertBefore(f(i[a++],1),f(r[o++],-1).nextSibling),e.insertBefore(f(i[--s],1),g),r[t]=i[s]}else{if(!v){v=new Map;for(var h=a;h<s;)v.set(i[h],h++)}if(v.has(r[o])){var d=v.get(r[o]);if(a<d&&d<s){for(var c=o,B=1;++c<t&&c<s&&v.get(r[c])===d+B;)B++;if(d-a<B)for(var b=f(r[o],0);a<d;)e.insertBefore(f(i[a++],1),b);else e.replaceChild(f(i[a++],1),f(r[o++],-1))}else o++}else e.removeChild(f(r[o++],-1))}return i},e}({}).default;

// console.log("page loaded!");
// updateLinks();

// async function updateDom(path) {
// console.log("Updating DOM with content from: ", path);
// const res = await fetch(path);
// const data = await res.text();

// const get = (o) => o;
// const parent = document.querySelector("html");
// const currentNodes = document.querySelector("html").childNodes;
// const dataNodes = new DOMParser()
  // .parseFromString(data, "text/html")
  // .querySelector("html").childNodes;

// udomdiff(
  // parent, // where changes happen
  // [...currentNodes], // Array of current items/nodes
  // [...dataNodes], // Array of future items/nodes (returned)
  // get // a callback to retrieve the node
// );

// updateLinks();
// window.scrollTo(0, 0);
// }

// function updateLinks() {
// document.querySelectorAll("a").forEach((link) => {
  // if (link.host === window.location.host) {
	// link.setAttribute("data-internal", true);

	// link.addEventListener("click", async (e) => {
	  // const destination = link.getAttribute("href");
	  // e.preventDefault();
	  // history.pushState({ route: destination }, destination, destination);
	  // await updateDom(destination);
	// });
  // } else {
	// link.setAttribute("data-external", true);
  // }
// });
// }

// window.onpopstate = function () {
// updateDom(window.location.pathname);
// };
        </script>
    </body>
</html>
